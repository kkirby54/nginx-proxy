events {
  worker_connections 1024;
}

http {
  server_tokens off;

  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;
  
  # Docker 내장 DNS 설정
  resolver 127.0.0.11 valid=10s ipv6=off;

  # ===== Rate Limiting 설정 =====
  limit_req_zone $binary_remote_addr zone=general:10m rate=20r/s;
  limit_req_status 429;

  # HTTP 서버: minhub.duckdns.org
  server {
    listen 80;
    server_name minhub.duckdns.org;

    # Let's Encrypt ACME Challenge (인증서 발급/갱신용)
    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }

    # Health check (HTTP로도 접근 가능)
    location /health {
      access_log off;
      default_type text/plain;
      return 200 "healthy\n";
    }

    #나머지 모든 요청은 HTTPS로 리다이렉션
    location / {
      return 301 https://minhub.duckdns.org$request_uri;
    }
  }

  # HTTP 서버: cloud.minhub.duckdns.org
  server {
    listen 80;
    server_name cloud.minhub.duckdns.org;

    # Let's Encrypt ACME Challenge (인증서 발급/갱신용)
    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }

    # Health check (HTTP로도 접근 가능)
    location /health {
      access_log off;
      default_type text/plain;
      return 200 "healthy\n";
    }

    #나머지 모든 요청은 HTTPS로 리다이렉션
    location / {
      return 301 https://cloud.minhub.duckdns.org$request_uri;
    }
  }

  # HTTPS 서버: 실제 서비스 제공
  server {
    listen 443 ssl;
    http2 on;
    server_name minhub.duckdns.org;
    client_max_body_size 100M;

    set $printing_pulse_backend "printing-pulse:8080";
    set $howmuch_reconcile_backend "howmuch-reconcile:8000";

    # ===== SSL 인증서 =====
    ssl_certificate /etc/letsencrypt/live/minhub.duckdns.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/minhub.duckdns.org/privkey.pem;

    # SSL 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;

    # ===== 보안 헤더 =====
    add_header Strict-Transport-Security "max-age=31536000" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Health
    location /health {
      access_log off;
      default_type text/plain;
      return 200 "healthy\n";
    }

    # printing-pulse API -> printing-pulse:8080
    location /printing/ {
      # Rate Limiting 적용 (초당 20개, 버스트 30개)
      limit_req zone=general burst=30 nodelay;
      
      # 1) /printing/ 접두사 제거 (쿼리스트링 자동 보존)
      # 2) URI 없는 proxy_pass
      rewrite ^/printing/(.*)$ /$1 break;      
      proxy_pass http://$printing_pulse_backend;

      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_connect_timeout 5s;
      proxy_read_timeout    60s;
      proxy_send_timeout    60s;
      proxy_redirect off;

      # 백엔드가 없을 때도 JSON로 깔끔 응답
      proxy_intercept_errors on;
      error_page 502 503 504 = @api_down;
    }
    location = /printing { return 301 /printing/; }

    # howmuch-reconcile Web -> howmuch-reconcile:8000
    location /ujin/ {
      # Rate Limiting 적용 (초당 20개, 버스트 30개)
      limit_req zone=general burst=30 nodelay;
      
      # 1) /ujin/ 접두사 제거 (쿼리스트링 자동 보존)
      # 2) URI 없는 proxy_pass
      rewrite ^/ujin/(.*)$ /$1 break;      
      proxy_pass http://$howmuch_reconcile_backend;
      
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_connect_timeout 5s;
      proxy_read_timeout    60s;
      proxy_send_timeout    60s;
      proxy_redirect off;
      
      # 백엔드가 없을 때도 JSON로 깔끔 응답
      proxy_intercept_errors on;
      error_page 502 503 504 = @web_down;
    }
    location = /ujin { return 301 /ujin/; }

    # 다운 시 대체 응답
    location @api_down {
      default_type application/json;
      return 503 '{"error":"upstream_unavailable","upstream":"printing-pulse"}\n';
    }
    location @web_down {
      default_type application/json;
      return 503 '{"error":"upstream_unavailable","upstream":"howmuch-reconcile"}\n';
    }

    # Default 404 (JSON)
    location / {
      default_type application/json;
      add_header Cache-Control "no-store" always;
      return 404 '{"error":"Not Found"}\n';
    }
  }

  # HTTPS 서버: Nextcloud 전용 (cloud.minhub.duckdns.org)
  server {
    listen 443 ssl;
    http2 on;
    server_name cloud.minhub.duckdns.org;
    client_max_body_size 2G;

    set $nextcloud_backend "nextcloud:8081";

    # ===== SSL 인증서 =====
    ssl_certificate /etc/letsencrypt/live/*.minhub.duckdns.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/*.minhub.duckdns.org/privkey.pem;

    # SSL 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers off;

    # ===== 보안 헤더 =====
    add_header Strict-Transport-Security "max-age=31536000" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Health check
    location /health {
      access_log off;
      default_type text/plain;
      return 200 "healthy\n";
    }

    # Nextcloud Web -> nextcloud:8081
    location / {
      # Rate Limiting 적용 (초당 20개, 버스트 30개)
      limit_req zone=general burst=30 nodelay;
      
      proxy_pass http://$nextcloud_backend;
      
      proxy_http_version 1.1;
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_connect_timeout 5s;
      proxy_read_timeout    60s;
      proxy_send_timeout    60s;
      proxy_redirect off;
      
      # 백엔드가 없을 때도 JSON로 깔끔 응답
      proxy_intercept_errors on;
      error_page 502 503 504 = @nextcloud_down;
    }

    # 다운 시 대체 응답
    location @nextcloud_down {
      default_type application/json;
      return 503 '{"error":"upstream_unavailable","upstream":"nextcloud"}\n';
    }
  }
}
